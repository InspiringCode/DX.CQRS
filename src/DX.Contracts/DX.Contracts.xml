<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DX.Contracts</name>
    </assembly>
    <members>
        <member name="M:DX.Contracts.Serialization.SerializationTypeRegistry.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            JUST for UNIT TESTING!
            </summary>
        </member>
        <member name="T:DX.Check">
            <summary>
              Provides static methods for parameter checks (similar to code contracts).
            </summary>
            <remarks>
              Use 'nameof' operator for 'parameterName' parameters!
            </remarks>
        </member>
        <member name="M:DX.Check.NotNull``1(``0,System.String)">
            <summary>
              Verifies that the supplied value is not a null reference.
            </summary>
            <param name="value">The value to verify.</param>
            <param name="parameterName">Use 'nameof' operator!</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:DX.Check.NotNull``1(System.Object,System.String)">
            <summary>
              Verifies that the supplied value is not a null reference.
            </summary>
            <typeparam name="TException">The type of the exception that will be thrown.</typeparam>
            <remarks>
              Can be used to check something that isn't an argument (e.g. with <see cref="T:System.InvalidOperationException"/>).
            </remarks>
        </member>
        <member name="M:DX.Check.NotEmpty(System.String,System.String)">
            <summary>
              Verifies that the supplied string value is neither a null reference nor an empty string.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is null or an empty string.</exception>
        </member>
        <member name="M:DX.Check.NotEmpty``1(``0,System.String)">
            <summary>
              Verifies that the supplied enumerable is neither a null reference nor empty.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is null or an empty enumerable.</exception>
        </member>
        <member name="M:DX.Check.NotDefault``1(``0,System.String)">
            <summary>
              Verifies that the supplied value is not the default value of the type <typeparamref name="T"/>.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> equals the default value of <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DX.Check.Requires(System.Boolean,System.String,System.String,System.Object[])">
            <summary>
              Verifies that the supplied boolean value is true.
            </summary>
        </member>
        <member name="M:DX.Check.Requires``1(System.Boolean,System.String,System.Object[])">
            <summary>
              Verifies that the supplied boolean value is true.
            </summary>
            <remarks>
              Can be used to check something that isn't an argument (e.g. with <see cref="T:System.InvalidOperationException"/>).
            </remarks>
        </member>
        <member name="M:DX.Check.BreakIfDebugging">
            <summary>
              Breaks execution if a debugger is attached. Only compiled in debug builds.
            </summary>
        </member>
    </members>
</doc>
